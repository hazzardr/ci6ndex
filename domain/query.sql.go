// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package domain

import (
	"context"
)

const createRanking = `-- name: CreateRanking :one
INSERT INTO ci6ndex.rankings
(
    user_id, tier, leader_id
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, tier, leader_id
`

type CreateRankingParams struct {
	UserID   int32
	Tier     int32
	LeaderID int32
}

func (q *Queries) CreateRanking(ctx context.Context, arg CreateRankingParams) (Ci6ndexRanking, error) {
	row := q.db.QueryRow(ctx, createRanking, arg.UserID, arg.Tier, arg.LeaderID)
	var i Ci6ndexRanking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.LeaderID,
	)
	return i, err
}

type CreateRankingsParams struct {
	UserID   int32
	Tier     int32
	LeaderID int32
}

const createUser = `-- name: CreateUser :one
INSERT INTO ci6ndex.users
(
    name, discord_name
) VALUES (
    $1, $2
)
RETURNING id, discord_name, name
`

type CreateUserParams struct {
	Name        string
	DiscordName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Ci6ndexUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.DiscordName)
	var i Ci6ndexUser
	err := row.Scan(&i.ID, &i.DiscordName, &i.Name)
	return i, err
}

const deleteRankings = `-- name: DeleteRankings :exec
DELETE FROM ci6ndex.rankings
RETURNING count(*)
`

func (q *Queries) DeleteRankings(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteRankings)
	return err
}

const getUserFromDiscordName = `-- name: GetUserFromDiscordName :one
SELECT id, discord_name, name FROM ci6ndex.users WHERE discord_name = $1 LIMIT 1
`

func (q *Queries) GetUserFromDiscordName(ctx context.Context, discordName string) (Ci6ndexUser, error) {
	row := q.db.QueryRow(ctx, getUserFromDiscordName, discordName)
	var i Ci6ndexUser
	err := row.Scan(&i.ID, &i.DiscordName, &i.Name)
	return i, err
}

const getUserFromName = `-- name: GetUserFromName :one
SELECT id, discord_name, name FROM ci6ndex.users WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserFromName(ctx context.Context, name string) (Ci6ndexUser, error) {
	row := q.db.QueryRow(ctx, getUserFromName, name)
	var i Ci6ndexUser
	err := row.Scan(&i.ID, &i.DiscordName, &i.Name)
	return i, err
}
